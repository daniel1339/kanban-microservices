services:
  # LocalStack for local AWS services
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sqs,sns,dynamodb,rds,ecs,lambda,apigateway
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - kanban-network

  # PostgreSQL for databases
  postgres:
    image: postgres:15
    container_name: kanban-postgres
    environment:
      POSTGRES_DB: kanban
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_password
    ports:
      - "5432:5432"  # Changed from 5433:5432 to 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanban_user -d kanban"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for cache and sessions
  redis:
    image: redis:7-alpine
    container_name: kanban-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (when you develop it)
  api-gateway:
    build:
      context: ./backend/services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # Auth Service (when you develop it)
  auth-service:
    build:
      context: ./backend/services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - JWT_SECRET=your-jwt-secret-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # User Service (when you develop it)
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # Board Service (when you develop it)
  board-service:
    build:
      context: ./backend/services/board-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # List Service (when you develop it)
  list-service:
    build:
      context: ./backend/services/list-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # Card Service (when you develop it)
  card-service:
    build:
      context: ./backend/services/card-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # Notification Service (when you develop it)
  notification-service:
    build:
      context: ./backend/services/notification-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

  # File Service (when you develop it)
  file-service:
    build:
      context: ./backend/services/file-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - DATABASE_URL=postgresql://kanban_user:kanban_password@postgres:5432/kanban
      - REDIS_URL=redis://redis:6379
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - CLOUDINARY_URL=your-cloudinary-url-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kanban-network
    profiles:
      - services

volumes:
  postgres_data:
  redis_data:

networks:
  kanban-network:
    driver: bridge 